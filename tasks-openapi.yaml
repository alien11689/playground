openapi: 3.1.1
info:
  title: Tasks API
  description: Tasks sample API
  version: 0.0.3

paths:
  /login:
    post:
      summary: Log in
      operationId: Login
      tags:
        - auth
      security:
        - basicAuth: [ ]
      responses:
        200:
          description: Successful login
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LoginResponse"
        401:
          $ref: "#/components/responses/UnauthorizedInvalidToken"

  /tasks:
    get:
      summary: Returns a list of tasks.
      operationId: GetTasks
      tags:
        - tasks
      x-spring-paginated: true
      parameters:
        - $ref: "#/components/parameters/pageablePage"
        - $ref: "#/components/parameters/pageableSize"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetTasksResponse"
        401:
          $ref: "#/components/responses/UnauthorizedInvalidToken"

    post:
      summary: Adds a new task
      operationId: AddTask
      tags:
        - tasks
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AddTaskRequest"
      responses:
        201:
          description: Task created
          headers:
            Location:
              required: true
              schema:
                type: string
                format: uri
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Task"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/UnauthorizedInvalidToken"

  /tasks/{taskId}:
    get:
      summary: Returns a task
      operationId: GetTask
      tags:
        - tasks
      parameters:
        - $ref: "#/components/parameters/taskId"
      responses:
        200:
          description: Task view
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Task"
        401:
          $ref: "#/components/responses/UnauthorizedInvalidToken"
        404:
          $ref: "#/components/responses/TaskNotFound"
    put:
      summary: Updates a task
      operationId: UpdateTask
      tags:
        - tasks
      parameters:
        - $ref: "#/components/parameters/taskId"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Task"
      responses:
        204:
          description: Task updated
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/UnauthorizedInvalidToken"
        404:
          $ref: "#/components/responses/TaskNotFound"
  /tasks/{taskId}/comments:
    get:
      summary: Get task comments
      operationId: GetTaskComments
      tags:
        - tasks
      x-spring-paginated: true
      parameters:
        - $ref: "#/components/parameters/taskId"
        - $ref: "#/components/parameters/pageablePage"
        - $ref: "#/components/parameters/pageableSize"
      responses:
        200:
          description: Comments list
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetTaskCommentsResponse"
        401:
          $ref: "#/components/responses/UnauthorizedInvalidToken"
        404:
          $ref: "#/components/responses/TaskNotFound"
    post:
      summary: Post a task comment
      operationId: AddTaskComment
      tags:
        - tasks
      parameters:
        - $ref: "#/components/parameters/taskId"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AddTaskCommentRequest"
      responses:
        201:
          description: Task comment added
          headers:
            Location:
              required: true
              schema:
                type: string
                format: uri
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Comment"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/UnauthorizedInvalidToken"
        404:
          $ref: "#/components/responses/TaskNotFound"
  /tasks/{taskId}/comments/{commentId}:
    put:
      summary: Update a task comment
      operationId: UpdateTaskComment
      tags:
        - tasks
      parameters:
        - $ref: "#/components/parameters/taskId"
        - $ref: "#/components/parameters/commentId"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Comment"
      responses:
        204:
          description: Comment updated
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/UnauthorizedInvalidToken"
        404:
          $ref: "#/components/responses/TaskOrCommentNotFound"
    delete:
      summary: Delete a task comment
      operationId: DeleteTaskComment
      tags:
        - tasks
      parameters:
        - $ref: "#/components/parameters/taskId"
        - $ref: "#/components/parameters/commentId"
      responses:
        204:
          description: Comment deleted
        401:
          $ref: "#/components/responses/UnauthorizedInvalidToken"
        404:
          $ref: "#/components/responses/TaskOrCommentNotFound"

  /users:
    get:
      summary: Returns a list of users.
      operationId: GetUsers
      tags:
        - users
      x-spring-paginated: true
      parameters:
        - $ref: "#/components/parameters/pageablePage"
        - $ref: "#/components/parameters/pageableSize"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetUsersResponse"
        401:
          $ref: "#/components/responses/UnauthorizedInvalidToken"
    post:
      summary: Create a user
      operationId: CreateUser
      tags:
        - users
      security: [ ]
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateUser"
      responses:
        201:
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"


components:
  schemas:
    AddTaskRequest:
      type: object
      properties:
        summary:
          $ref: "#/components/schemas/NonEmptyString"
        description:
          type: string
      required:
        - summary

    GetTasksResponse:
      type: object
      properties:
        tasks:
          type: array
          items:
            $ref: "#/components/schemas/Task"
      required:
        - tasks

    Task:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/TaskId"
          readOnly: true
        summary:
          $ref: "#/components/schemas/NonEmptyString"
        description:
          type: string
        status:
          $ref: "#/components/schemas/TaskStatus"
        createdAt:
          $ref: "#/components/schemas/DateTime"
          readOnly: true
        createdBy:
          $ref: "#/components/schemas/UserId"
          readOnly: true
        updatedAt:
          $ref: "#/components/schemas/DateTime"
          readOnly: true
        updatedBy:
          $ref: "#/components/schemas/UserId"
          readOnly: true
        assignee:
          $ref: "#/components/schemas/UserId"
      required:
        - id
        - summary
        - status
        - createdAt
        - createdBy
        - updatedAt
        - updatedBy

    TaskId:
      type: string
      format: uuid

    TaskStatus:
      type: string
      enum:
        - NEW
        - PENDING
        - DONE
        - REJECTED

    Error:
      type: object
      properties:
        message:
          type: string
      required:
        - message

    GetTaskCommentsResponse:
      type: object
      properties:
        comments:
          type: array
          items:
            $ref: "#/components/schemas/Comment"
      required:
        - comments

    Comment:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/CommentId"
          readOnly: true
        content:
          $ref: "#/components/schemas/NonEmptyString"
        createdAt:
          $ref: "#/components/schemas/DateTime"
          readOnly: true
        updatedAt:
          $ref: "#/components/schemas/DateTime"
          readOnly: true
        addedBy:
          $ref: "#/components/schemas/UserId"
          readOnly: true
      required:
        - id
        - content
        - createdAt
        - updatedAt
        - authorId

    AddTaskCommentRequest:
      type: object
      properties:
        content:
          $ref: "#/components/schemas/NonEmptyString"
      required:
        - content

    CommentId:
      type: string
      format: uuid

    NonEmptyString:
      type: string
      minLength: 1
      pattern: '^(?!\s*$).+'

    LoginResponse:
      type: object
      properties:
        token:
          $ref: "#/components/schemas/NonEmptyString"
      required:
        - token

    User:
      type: object
      properties:
        userId:
          $ref: "#/components/schemas/UserId"
        username:
          $ref: "#/components/schemas/NonEmptyString"
        firstName:
          $ref: "#/components/schemas/NonEmptyString"
        lastName:
          $ref: "#/components/schemas/NonEmptyString"
      required:
        - userId
        - username
        - firstName
        - lastName

    CreateUser:
      type: object
      properties:
        username:
          $ref: "#/components/schemas/NonEmptyString"
        firstName:
          $ref: "#/components/schemas/NonEmptyString"
        lastName:
          $ref: "#/components/schemas/NonEmptyString"
      required:
        - username
        - firstName
        - lastName

    UserId:
      type: string
      format: uuid

    GetUsersResponse:
      type: object
      properties:
        users:
          type: array
          items:
            $ref: "#/components/schemas/User"
      required:
        - users

    DateTime:
      type: string
      format: date-time

  responses:
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    TaskNotFound:
      description: Task not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    TaskOrCommentNotFound:
      description: Task or comment not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    UnauthorizedInvalidToken:
      description: Token is invalid
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"

  parameters:
    taskId:
      in: path
      name: taskId
      schema:
        $ref: "#/components/schemas/TaskId"
      required: true
    commentId:
      in: path
      name: commentId
      schema:
        $ref: "#/components/schemas/CommentId"
      required: true
    pageablePage:
      in: query
      name: page
      schema:
        type: integer
        format: int32
        minimum: 0
      required: false
    pageableSize:
      in: query
      name: size
      schema:
        type: integer
        format: int32
        minimum: 10
        maximum: 100
      required: false

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: "UUID"
    basicAuth:
      type: http
      scheme: basic

security:
  - bearerAuth: [ ]

tags:
  - name: tasks
    description: Tasks related operations
  - name: auth
    description: Authentication related operations
  - name: users
    description: Users management